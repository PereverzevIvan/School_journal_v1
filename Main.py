import os
import sys
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QTableWidgetItem, QMessageBox, QCalendarWidget, \
    QScrollBar
from Designs import Pupil_form, Main_window, add_subject_form, about_us
from Creating_db_1 import CreateDBWindow
import sqlite3
import datetime as dt
import matplotlib.pyplot as plt
import numpy as np
from PyQt5.QtGui import QPixmap, QIcon
from modules.Errors import PupilNotFoundError
import json


def question_valid(wnd, message):
    mes_box = QMessageBox().question(wnd, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', message, QMessageBox.Yes, QMessageBox.No)
    return mes_box


# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ json-—Ñ–∞–π–ª–∞
def get_subs():
    with open('subjects.json', mode='r', encoding='utf-8') as js_file:
        return json.load(js_file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ —É—á–µ–Ω–∏–∫–∞
def get_len_for_sort(lenth):
    return lenth if lenth else 1


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–¥–≤–∏–≥–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥
def month_move(move, date):
    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    date_str = [int(i) for i in date.split('-')][::-1]
    date = dt.datetime(*date_str)
    if (date.year % 400 == 0) or (date.year % 4 == 0 and date.year % 100 != 0):
        months[1] = 29
    if move == 'ago':
        date -= dt.timedelta(days=months[(date.month - 2) % 12])
    else:
        date += dt.timedelta(days=months[(date.month - 1) % 12])
    return date


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞
def now_education_year():
    now_year = dt.datetime.now().year
    now_month = dt.datetime.now().month
    now_year = now_year - 1 if now_month not in range(9, 13) else now_year
    need_date = dt.datetime(now_year, 9, 1)
    next_date = dt.datetime(now_year + 1, 5, 31)
    return need_date, next_date


def too_many_days(frt_date, scd_date):
    st_dt = [int(i) for i in frt_date.split('-')]
    fn_dt = [int(i) for i in scd_date.split('-')]
    start_date = dt.datetime(st_dt[2], st_dt[1], st_dt[0])
    finish_date = dt.datetime(fn_dt[2], fn_dt[1], fn_dt[0])
    if finish_date - start_date > dt.timedelta(days=366):
        return True
    return False


# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏
def between_dates(frt_date, scd_date):
    all_date = []
    st_dt = [int(i) for i in frt_date.split('-')]
    fn_dt = [int(i) for i in scd_date.split('-')]
    start_date = dt.datetime(st_dt[2], st_dt[1], st_dt[0])
    finish_date = dt.datetime(fn_dt[2], fn_dt[1], fn_dt[0])
    while start_date <= finish_date:
        if start_date.weekday() not in [5, 6] and start_date.month not in [6, 7, 8]:
            all_date.append(start_date.strftime('%d-%m-%Y'))
        start_date += dt.timedelta(days=1)
    if not all_date:
        all_date = [start_date + dt.timedelta(days=1)]
    return all_date


def find_db():
    try:
        db_count = len([i for i in os.listdir('Data_bases') if '.db' in i])
    except FileNotFoundError:
        db_count = 0
    return db_count


# –ö–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
class MainWindow(QMainWindow, Main_window.Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.setWindowTitle('–®–∫–æ–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª')
        self.setWindowIcon(QIcon('static/icon.png'))
        self.class_box.addItems([str(i) for i in range(1, 12)])  # –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
        self.error_lab.hide()
        self.btn_open_pupil.clicked.connect(self.open_pupil_form)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞

        sub = get_subs()
        self.class_box.currentTextChanged.connect(self.subject_box_update)  # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.subject_box.addItems(sub[self.class_box.currentText()])

        self.check_class.clicked.connect(self.show_pupils)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–¥
        self.table_puplis.itemChanged.connect(self.update_elem)  # –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
        self.btn_delete_pupil.clicked.connect(self.delete_elem)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
        self.btn_add_pupil.clicked.connect(self.insert_elem)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
        self.btn_find_pupil.clicked.connect(self.find_pupils)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–∞
        self.btn_sort.clicked.connect(self.sort_pupil)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤
        self.sort_order.clicked.connect(self.change_sort_order)  # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.create_bd_action.triggered.connect(self.create_data_bases)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–¥
        self.about_action.triggered.connect(self.open_about_us)
        self.add_subject_action.triggered.connect(self.open_add_subject_form)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        self.month_ago.clicked.connect(lambda ch, x='ago': self.month_fast_move(x))
        self.month_later.clicked.connect(lambda ch, x='later': self.month_fast_move(x))

        start_calendar = QCalendarWidget()
        start_calendar.setStyleSheet('background-color: white; padding-right: 10px; color: black')
        start_calendar.setGridVisible(True)
        start_calendar.setVerticalHeaderFormat(0)
        finish_calendar = QCalendarWidget()
        finish_calendar.setStyleSheet('background-color: white; padding-right: 10px; color: black')
        finish_calendar.setGridVisible(True)
        finish_calendar.setVerticalHeaderFormat(0)

        start, finish = now_education_year()  # –ü–µ—Ä–∏–æ–¥ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Ü–µ–Ω–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.start_date.setDate(start)
        self.finish_date.setDate(start + dt.timedelta(days=30))
        self.start_date.setCalendarWidget(start_calendar)
        self.finish_date.setCalendarWidget(finish_calendar)

        scroll_1 = QScrollBar()
        scroll_1.setStyleSheet('background-color: lightgray')
        scroll_2 = QScrollBar()
        scroll_2.setStyleSheet('background-color: lightgray')

        self.table_puplis.setVerticalScrollBar(scroll_1)
        self.table_puplis.setHorizontalScrollBar(scroll_2)

        # –°–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫–∏
        self.start_date.dateChanged.connect(self.change_now_between_dates)
        self.finish_date.dateChanged.connect(self.change_now_between_dates)

        self.table_class = ''  # –ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –æ—Ç–∫—Ä—ã—Ç—å
        self.table_name = ''  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –≤—ã–≤–µ—Å—Ç–∏

        self.window_for_create = None  # –û–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.window_about_us = None  # –û–∫–Ω–æ "–û –Ω–∞—Å"
        self.add_subject_wnd = None  # –û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–±–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        self.open_pupil_profiles = []  # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–µ–Ω–∏–∫–æ–≤

        self.con = None  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–¥
        self.all_titles = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.variability = False  # –ò–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        self.find_process = False  # –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
        self.sort_process = False  # –ü—Ä–æ—Ü–µ—Å—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.loading_between_dates = ''  # –ü–µ—Ä–∏–æ–¥, –¥–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –Ω–∞–π–¥–µ–Ω—ã (—Ç–µ–∫—É—â–∏–π)
        # –ü–µ—Ä–∏–æ–¥, –¥–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –Ω–∞–π—Ç–∏ (–±—É–¥—É—â–∏–π)
        self.now_between_dates = f'{self.start_date.text()} {self.finish_date.text()}'
        self.between_date = []  # –í—Å–µ –¥–∞—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ

        self.month_ago.setToolTip('–ü–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–∞ –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥')
        self.month_later.setToolTip('–ü–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥')

        self.sort_direction = 'ü†ó'
        self.sort_order.setText('ü†ó')
        self.sort_order.setToolTip('–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é')
        self.sort_order.setIcon(QIcon('static/sort-icon_1.png'))

    def month_fast_move(self, move):
        self.start_date.setDate(month_move(move, self.start_date.text()))
        self.finish_date.setDate(month_move(move, self.finish_date.text()))

    # –ú–µ—Ç–æ–¥ —Å–º–µ–Ω—ã –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏–ª–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    def change_sort_order(self):
        if self.sort_direction == 'ü†ï':
            self.sort_direction = 'ü†ó'
            self.sort_order.setToolTip('–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é')
            self.sort_order.setIcon(QIcon('static/sort-icon_1.png'))
        else:
            self.sort_direction = 'ü†ï'
            self.sort_order.setToolTip('–ü–æ —É–±—ã–≤–∞–Ω–∏—é')
            self.sort_order.setIcon(QIcon('static/sort-icon.png'))

    # –ú–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    def closeEvent(self, event):
        event.accept()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        exit()

    # –ú–µ—Ç–æ–¥ —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏
    def change_now_between_dates(self):
        self.now_between_dates = f'{self.start_date.text()} {self.finish_date.text()}'

    # –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ –µ—ë –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º –≤–∏–¥–µ
    def show_pupils(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–¥
        if find_db() == 11:
            self.find_process = False
            self.sort_process = False
            self.pupil_name_for_find.setText('')  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
            self.table_puplis.clear()  # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.error_lab.hide()
            self.table_class = self.class_box.currentText()  # –ö–ª–∞—Å—Å
            self.table_name = self.subject_box.currentText()  # –ü—Ä–µ–¥–º–µ—Ç

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å –±–¥
            self.con = sqlite3.connect(f"Data_bases/Class_{self.table_class}.db")
            cur = self.con.cursor()
            try:
                rows_in_table = cur.execute(f"SELECT * FROM '{self.table_name.lower()}'").fetchall()
            except sqlite3.OperationalError:
                self.error_lab.setText('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
                self.error_lab.show()
                return
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ –±–¥
            self.all_titles = [description[0] for description in cur.description]
            self.load_table(rows_in_table)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É

        else:
            self.error_lab.setText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–∏—Ö –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ'
                                   ' "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")')
            self.error_lab.show()

    # –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ QTableWidget –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    def load_table(self, rows_in_table):
        self.variability = False
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –±—É–¥—É—â–∏–º –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        if self.loading_between_dates != self.now_between_dates:
            if not too_many_days(self.start_date.text(), self.finish_date.text()):
                self.between_date = [i for i in self.all_titles if i in
                                     between_dates(self.start_date.text(), self.finish_date.text())]
                if self.between_date == []:
                    self.error_lab.setText('–î–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
                    self.error_lab.show()
            else:
                self.error_lab.setText('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏')
                self.error_lab.show()
                self.between_date = []
            self.loading_between_dates = self.now_between_dates
        # –°–ø–∏—Å–æ–∫ –¥–∞—Ç, –æ—Ü–µ–Ω–∫–∏ –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã
        used_titles = self.all_titles[:2] + self.between_date
        # –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω—É–∂–Ω—ã—Ö –¥–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –¥–∞—Ç
        used_titles_indexes = [self.all_titles.index(i) for i in used_titles]
        self.table_puplis.setColumnCount(len(used_titles))  # –ö–æ–ª-–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        self.table_puplis.setRowCount(len(rows_in_table) + 1)  # –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        for i, row in enumerate(used_titles):
            self.table_puplis.setItem(0, i, QTableWidgetItem(str(row)))
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for i, row in enumerate(rows_in_table):
            column_set = 0
            for j in used_titles_indexes:
                elem = row[j]
                elem = '' if elem is None else elem
                self.table_puplis.setItem(i + 1, column_set, QTableWidgetItem(str(elem)))
                column_set += 1
        self.table_puplis.setColumnWidth(0, 50)
        self.table_puplis.setColumnWidth(1, 250)
        [self.table_puplis.setColumnWidth(i, 85) for i in range(2, self.table_puplis.columnCount())]
        self.variability = True
        self.update()

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤
    def sort_pupil(self):
        self.error_lab.hide()
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        if self.variability:
            sort_key = self.sort_key_box.currentText()  # –ö–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            cur = self.con.cursor()  # –ö—É—Ä—Å–æ—Ä
            request_1 = f"SELECT * FROM '{self.table_name.lower()}'\n"
            request_2 = f"ORDER BY {sort_key}"
            if sort_key == '–°—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É':
                rows_in_table = cur.execute(request_1).fetchall()
                pupils = {}
                [pupils.__setitem__(x[0], tuple(int(j) for j in x[2:] if j is not None and j.isdigit())) for x in
                 rows_in_table]
                new_list = sorted([[key, round(sum(pupils[key]) / get_len_for_sort(len(pupils[key])), 2)]
                                   for key in pupils.keys()], key=lambda x: x[1])
                rows_in_table = [rows_in_table[i[0] - 1] for i in new_list]
            else:
                rows_in_table = cur.execute(request_1 + request_2).fetchall()
            if self.sort_direction == 'ü†ï':
                rows_in_table = rows_in_table[::-1]
            self.load_table(rows_in_table)
            self.sort_process = True
            self.find_process = False
        else:
            self.error_lab.setText('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å"')
            self.error_lab.show()

    # –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–∞(–æ–≤)
    def find_pupils(self):
        self.error_lab.hide()
        if self.variability:
            # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫
            desire_pupil = self.pupil_name_for_find.text()
            if desire_pupil:
                cur = self.con.cursor()  # –ö—É—Ä—Å–æ—Ä
                rows_in_table = cur.execute(f"SELECT * FROM '{self.table_name.lower()}'").fetchall()
                if rows_in_table:
                    rows_in_table = [i for i in rows_in_table if i[1] is not None]
                    rows_in_table = [i for i in rows_in_table if desire_pupil.lower() in i[1].lower()]
                    if rows_in_table:
                        self.load_table(rows_in_table)
                        self.find_process = True
                        self.sort_process = False
                    else:
                        self.error_lab.setText('–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                        self.error_lab.show()
            else:
                self.error_lab.setText('–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û —É—á–µ–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–µ')
                self.error_lab.show()
        else:
            self.error_lab.setText('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å"')
            self.error_lab.show()

    # –ú–µ—Ç–æ–¥, –∏–∑–º–µ–Ω—è—é—â–∏–π —Ç–∞–±–ª–∏—Ü—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å QTableWidget
    def update_elem(self, tb_item):
        if self.variability:
            change = False  # –ü—Ä–æ—à–ª–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
            column_name = self.table_puplis.item(0, tb_item.column()).text()
            # –ü–æ–ª—É—á–∞–µ–º id —É—á–µ–Ω–∏–∫–∞
            pupil_id = self.table_puplis.item(tb_item.row(), 0).text()
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            item_content = self.table_puplis.item(tb_item.row(), tb_item.column()).text()
            request_2 = ''
            request_3 = f"WHERE id = {pupil_id}"
            if tb_item.row() != 0:
                if tb_item.column() == 1:
                    # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä
                    if all(el not in ''.join(item_content.split()) for el in '123456790!@#$%^&*()?/"‚Ññ:,./|\\'):
                        change = True
                        request_2 = f"SET '{column_name}' = '{item_content}'\n"
                    elif item_content == '':
                        item_content = 'NULL'
                        request_2 = f"SET '{column_name}' = {item_content}\n"
                        change = True
                elif tb_item.column() > 1:
                    # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                    if item_content.isdigit():
                        # –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç [2;5]
                        if int(item_content) in range(2, 6):
                            request_2 = f"SET '{column_name}' = {item_content}\n"
                            change = True
                    else:
                        if item_content.lower() == '–Ω':
                            item_content = '–Ω'
                            request_2 = f"SET '{column_name}' = '{item_content}'\n"
                            change = True
                    if item_content == '':
                        item_content = 'NULL'
                        request_2 = f"SET '{column_name}' = {item_content}\n"
                        change = True
            if change:
                cur = self.con.cursor()
                if tb_item.column() == 1:
                    # –ü—Ä–æ–≤–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –±–¥
                    sub = get_subs()
                    for subject in sub[self.table_class]:
                        request_1 = f"UPDATE '{subject.lower()}'\n"
                        request = request_1 + request_2 + request_3
                        cur.execute(request)
                else:
                    request_1 = f"UPDATE '{self.table_name.lower()}'\n"
                    request = request_1 + request_2 + request_3
                    cur.execute(request)
                self.con.commit()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ç–æ–º —Ä–µ–∂–∏–º–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ –±—ã–ª–∞ –¥–æ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if self.find_process:
                self.find_pupils()
            elif self.sort_process:
                self.sort_pupil()
            else:
                self.show_pupils()

    # –ú–µ—Ç–æ–¥ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤
    def numerate_pupils(self, cur, subject):
        cur_id = 1
        all_ids = cur.execute(f"SELECT id FROM '{subject.lower()}'").fetchall()
        for i in all_ids:
            request_1 = f"UPDATE '{subject.lower()}'\n"
            request_2 = f"SET 'id' = {cur_id}\n"
            request_3 = f"WHERE id = {i[0]}"
            request = request_1 + request_2 + request_3
            cur.execute(request)
            cur_id += 1

    # –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    def delete_elem(self):
        self.error_lab.hide()
        if self.variability:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            select_rows = list(set([i.row() for i in self.table_puplis.selectedItems()]))
            if select_rows and 0 not in select_rows:
                # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                mes = '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏?\n' \
                      '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è'
                valid = question_valid(self, mes)
                if valid == QMessageBox.Yes:
                    cur = self.con.cursor()
                    # –ü–æ–ª—É—á–∞–µ–º id —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å
                    ids = [self.table_puplis.item(i, 0).text() for i in select_rows]
                    # –£–¥–∞–ª—è–µ–º —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –±–¥
                    sub = get_subs()
                    for subject in sub[self.table_class]:
                        # –£–¥–∞–ª—è–µ–º
                        for i in ids:
                            request = f"DELETE FROM '{subject.lower()}' WHERE id = {i}"
                            cur.execute(request)
                        # –ù–æ–º–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                        self.numerate_pupils(cur, subject)
                        self.con.commit()
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ç–æ–º —Ä–µ–∂–∏–º–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ –±—ã–ª–∞ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    if self.find_process:
                        self.find_pupils()
                    elif self.sort_process:
                        self.sort_pupil()
                    else:
                        self.show_pupils()
            else:
                self.error_lab.setText('–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
                self.error_lab.show()
        else:
            self.error_lab.setText('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å"')
            self.error_lab.show()

    # –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –≤ –±–¥
    def insert_elem(self):
        self.error_lab.hide()
        if self.variability and not self.find_process:
            cur = self.con.cursor()
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ –≤–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–¥
            sub = get_subs()
            for subject in sub[self.table_class]:
                ids = [int(self.table_puplis.item(i, 0).text()) for i in range(1, self.table_puplis.rowCount())]
                if len(ids):
                    request = f"INSERT INTO '{subject.lower()}'(–§–ò–û, id) VALUES('', {max(ids) + 1})"
                else:
                    request = f"INSERT INTO '{subject.lower()}'(–§–ò–û, id) VALUES('', 1)"
                cur.execute(request)
                self.con.commit()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ç–æ–º —Ä–µ–∂–∏–º–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ –±—ã–ª–∞ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if self.find_process:
                self.find_pupils()
            elif self.sort_process:
                self.sort_pupil()
            else:
                self.show_pupils()
        else:
            if self.find_process:
                self.error_lab.setText('–í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞')
            else:
                self.error_lab.setText('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å"')
            self.error_lab.show()

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã —É—á–µ–±–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
    def subject_box_update(self):
        self.error_lab.hide()
        sub = get_subs()
        self.subject_box.clear()
        self.subject_box.addItems(sub[self.class_box.currentText()])

    def clear_pupil_table_widget(self):
        self.table_puplis.clear()
        self.table_puplis.setRowCount(0)
        self.table_puplis.setColumnCount(0)

    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    def open_pupil_form(self):
        self.error_lab.hide()
        if self.variability:
            selected_rows = list(set([i.row() for i in self.table_puplis.selectedItems()]))
            if len(selected_rows) == 1 and selected_rows != [0]:
                name = self.table_puplis.item(selected_rows[0], 1).text()  # –§–ò–û
                class_num = self.class_box.currentText()  # –ö–ª–∞—Å—Å
                subject = self.subject_box.currentText()  # –ü—Ä–µ–¥–º–µ—Ç
                p_id = self.table_puplis.item(selected_rows[0], 0).text()  # id —É—á–µ–Ω–∏–∫–∞
                pupil_form = PupilForm(name, class_num, subject, p_id)  # –û–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞
                self.open_pupil_profiles.append(pupil_form)  # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            elif len(selected_rows) > 1:
                self.error_lab.setText('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ —É—á–µ–Ω–∏–∫–æ–≤ —Å—Ä–∞–∑—É (—Ç–æ–ª—å–∫–æ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ)')
                self.error_lab.show()
            elif len(selected_rows) == 0:
                self.error_lab.setText('–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞, –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –µ–≥–æ —Å—Ç—Ä–æ–∫—É')
                self.error_lab.show()
        else:
            self.error_lab.setText('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å"')
            self.error_lab.show()

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    def open_add_subject_form(self):
        self.error_lab.hide()
        if find_db() == 11:
            self.add_subject_wnd = AddSubjectForm(self)
        else:
            self.error_lab.setText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–∏—Ö –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ'
                                   ' "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")')
            self.error_lab.show()

    def open_about_us(self):
        self.error_lab.hide()
        self.window_about_us = AboutUsWindow()

    # –ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–¥
    def create_data_bases(self):
        self.error_lab.hide()
        if self.window_for_create is not None:
            if not self.window_for_create.process_was_start:
                self.window_for_create.close()
                self.window_for_create = None
                self.create_data_bases()
            else:
                self.error_lab.setText('–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–∑–¥–∞—é—Ç—Å—è')
                self.error_lab.show()
        else:
            self.window_for_create = CreateDBWindow()


# –ö–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞
class PupilForm(QWidget, Pupil_form.Ui_Form):
    def __init__(self, pupil_name, class_num, subject, pupil_id):
        super(PupilForm, self).__init__()
        self.setupUi(self)
        self.setWindowIcon(QIcon('static/icon_profile.png'))

        sub = get_subs()
        self.objects_box.addItems(sub[class_num])  # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.objects_box.setCurrentText(subject)

        self.objects_box.currentTextChanged.connect(self.load_info)  # –°–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–∞
        self.month_ago.clicked.connect(lambda ch, x='ago': self.month_fast_move(x))
        self.month_later.clicked.connect(lambda ch, x='later': self.month_fast_move(x))
        self.pupil_name_line.setText(pupil_name)  # –ü–æ–ª–µ —Å –§–ò–û —É—á–µ–Ω–∏–∫–∞
        self.pupil_class.setText(str(class_num))  # –ü–æ–ª–µ —Å –∫–ª–∞—Å—Å–æ–º —É—á–µ–Ω–∏–∫–∞
        self.setWindowTitle(f'–ü—Ä–æ—Ñ–∏–ª—å {pupil_name}')
        start, finish = now_education_year()  # –ü–µ—Ä–∏–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        self.start_date.setDate(start)
        self.finish_date.setDate(start + dt.timedelta(days=30))
        # –°–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞
        self.start_date.dateChanged.connect(self.change_period_event)
        self.finish_date.dateChanged.connect(self.change_period_event)

        self.pupil_id = pupil_id  # id —É—á–µ–Ω–∏–∫–∞
        self.con = sqlite3.connect(f'Data_bases/Class_{class_num}.db')  # –°–≤—è–∑—å —Å –±–¥
        self.all_titles = None  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        self.pupil_info = None  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ
        self.pixmap = None  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        self.month_ago.setToolTip('–ü–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–∞ –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥')
        self.month_later.setToolTip('–ü–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥')

        start_calendar = QCalendarWidget()
        start_calendar.setStyleSheet('background-color: white; padding-right: 10px; color: black')
        start_calendar.setGridVisible(True)
        start_calendar.setVerticalHeaderFormat(0)
        finish_calendar = QCalendarWidget()
        finish_calendar.setStyleSheet('background-color: white; padding-right: 10px; color: black')
        finish_calendar.setGridVisible(True)
        finish_calendar.setVerticalHeaderFormat(0)

        self.start_date.setCalendarWidget(start_calendar)
        self.finish_date.setCalendarWidget(finish_calendar)

        self.load_info()
        self.show()

    # –ú–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–µ–≤
    def month_fast_move(self, move):
        self.start_date.setDate(month_move(move, self.start_date.text()))
        self.finish_date.setDate(month_move(move, self.finish_date.text()))

    # –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–∏–∫–µ
    def load_info(self):
        try:
            self.label_3.setText('–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ —É—á–µ–Ω–∏–∫–∞ –∑–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü')
            cur = self.con.cursor()
            subject = self.objects_box.currentText().lower()
            self.pupil_info = cur.execute(f"SELECT * FROM '{subject}' WHERE id = {self.pupil_id}").fetchone()[2:]
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            self.all_titles = [description[0] for description in cur.description][2:]
            if self.pupil_info is None:
                raise PupilNotFoundError
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤
            leaves = len([i for i in self.pupil_info if i == '–Ω'])
            self.leaves_l.setText(str(leaves))
            self.create_histogramm()  # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
            self.change_period_event()
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except PupilNotFoundError:
            self.label_3.setText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —É—á–µ–Ω–∏–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ')
            self.graphics.clear()

    # –ú–µ—Ç–æ–¥ –∏–∑–º–µ–Ω—è—é—â–∏–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    def change_period_event(self):
        btwn_dates = between_dates(self.start_date.text(), self.finish_date.text())
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        between_date = [self.all_titles.index(i) for i in btwn_dates if i in self.all_titles]
        self.set_average_score(between_date)
        self.set_leaves_count(between_date)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    def set_leaves_count(self, between_date):
        leaves = 0
        if between_date:
            leaves = len([self.pupil_info[i] for i in between_date if self.pupil_info[i] == '–Ω'])
        self.leaves_l.setText(str(leaves))

    # –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    def set_average_score(self, between_date):
        average_score = '–ù–µ—Ç'
        if between_date:
            scores = [int(self.pupil_info[i]) for i in between_date
                      if self.pupil_info[i] and self.pupil_info[i].isdigit()]
            if scores:
                average_score = round(sum(scores) / len(scores), 2)
        self.average_score_line.setText(str(average_score))

    # –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ —É—á–µ–Ω–∏–∫–∞
    def create_histogramm(self):
        plt.close()
        # –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - –º–µ—Å—è—Ü—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - –æ—Ü–µ–Ω–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —ç—Ç–∏ –º–µ—Å—è—Ü—ã
        score_month = {'09': [], '10': [], '11': [], '12': [], '01': [], '02': [], '03': [],
                       '04': [], '05': []}
        # –ò–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–∏–∫–µ –±–µ—Ä–µ–º –≤—Å–µ –µ–≥–æ –æ—Ü–µ–Ω–∫–∏
        [score_month[self.all_titles[i][3:5]].append(int(self.pupil_info[i]))
         for i in range(len(self.all_titles)) if self.pupil_info[i] and self.pupil_info[i] in '2345']
        values = []
        for key in score_month.keys():
            scores = score_month[key]
            if len(scores) == 0:
                values += [0]
            else:
                values += [round(sum(scores) / len(scores), 2)]
        # –ö–æ–ª-–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–µ
        index = np.arange(9)
        indexes = [0, 1, 2, 3, 4, 5, 6, 7, 8]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∞–º—É –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
        plt.bar(indexes, values, color='orange', bottom=0)
        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω. –∏ –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏—è
        plt.ylim(0, 5)
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        plt.xticks(index, ['—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è–±', '–¥–µ–∫', '—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä—Ç', '–∞–ø—Ä', '–º–∞–π'])
        # –ù–∞–¥ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–æ–π –≤—ã–ø–∏—Å—ã–≤–∞–µ–º –µ—ë —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        for x, y in zip(index, values):
            plt.text(x, y + 0.05, y, ha='center', va='bottom')
        plt.savefig('static/Graphics.png')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        self.pixmap = QPixmap('static/Graphics.png')
        self.graphics.setPixmap(self.pixmap)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –≤ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è


# –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ª–æ–≥–∏–∫—É –æ–∫–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
class AddSubjectForm(QWidget, add_subject_form.Ui_AddSubjectForm):
    def __init__(self, wnd):
        super(AddSubjectForm, self).__init__()
        self.setupUi(self)
        self.setWindowTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏')
        self.error_lab1.setText('')
        self.error_lab2.setText('')
        self.setWindowIcon(QIcon('static/icon.png'))
        self.class_line.textChanged.connect(self.class_test)
        self.name_line.textChanged.connect(self.name_test)
        self.btn_ok.clicked.connect(self.enter)
        self.btn_delete.clicked.connect(self.delete)
        self.wnd = wnd
        self.clas = False  # –ö–ª–∞—Å—Å –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        self.name = False  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        self.show()

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å–∞
    def class_test(self):
        text = self.class_line.text()
        if not text:
            self.clas = False
            self.error_lab1.setText('')
            return
        if not text.isdigit():
            self.clas = False
            self.error_lab1.setText('–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–∑—É—á–∞–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç')
            return
        else:
            if int(text) not in range(1, 12):
                self.clas = False
                self.error_lab1.setText('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11')
                return
        self.clas = True
        self.error_lab1.setText('')
        return

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    def name_test(self):
        text = self.name_line.text()
        if not text:
            self.error_lab2.setText('')
            self.name = False
            return
        if any([str(i) in text for i in range(10)]):
            self.name = False
            self.error_lab2.setText('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–µ–ª')
            return
        self.name = True
        self.error_lab2.setText('')
        return

    # –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    def enter(self):
        if self.clas and self.name:
            clas, name = self.class_line.text(), self.name_line.text()
            con = sqlite3.connect(f"Data_bases/Class_{clas}.db")
            cur = con.cursor()
            tables = cur.execute('SELECT name from sqlite_master where type = "table"').fetchall()
            if any([name.lower() == i[0] for i in tables]):
                self.error_lab2.setText('–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å')
                return
            self.btn_ok.setEnabled(False)
            self.btn_delete.setEnabled(False)
            self.error_lab2.setText('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è')
            first_sub = self.wnd.subject_box.itemText(1).lower()
            all_pupils = cur.execute(f"SELECT id, –§–ò–û FROM '{first_sub}'").fetchall()
            cur.execute(f'SELECT * FROM "{first_sub}"')
            all_titles = [description[0] for description in cur.description][2:]
            cur.execute(
                f"CREATE TABLE IF NOT EXISTS '{name.lower()}' (id INTEGER PRIMARY KEY AUTOINCREMENT, '–§–ò–û' TEXT)")
            for j in all_titles:
                cur.execute(f"ALTER TABLE '{name.lower()}' ADD COLUMN '{j}' TEXT")
            for i in all_pupils:
                cur.execute(f"INSERT INTO '{name.lower()}' (id, –§–ò–û) VALUES({i[0]}, '{i[1]}')")
            con.commit()
            con.close()
            file = get_subs()
            file[clas].append(name.lower().capitalize())
            with open('subjects.json', mode='w', encoding='utf-8') as js_file:
                json.dump(file, js_file, indent=4, ensure_ascii=False)
            self.btn_ok.setEnabled(True)
            self.btn_delete.setEnabled(True)
            self.error_lab2.setText('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ')
            self.wnd.subject_box_update()

    def delete(self):
        if self.clas and self.name:
            valid = question_valid(self, '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç?')
            if valid == QMessageBox.No:
                return
            clas, name = self.class_line.text(), self.name_line.text()
            con = sqlite3.connect(f"Data_bases/Class_{clas}.db")
            cur = con.cursor()
            tables = cur.execute('SELECT name from sqlite_master where type= "table"').fetchall()
            if not any([name.lower() == i[0] for i in tables]):
                self.error_lab2.setText('–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç')
                return
            else:
                self.btn_ok.setEnabled(False)
                self.btn_delete.setEnabled(False)
                cur.execute(f'DROP TABLE "{name.lower()}"')
                file = get_subs()
                del file[clas][file[clas].index(name.lower().capitalize())]
                with open('subjects.json', mode='w', encoding='utf-8') as js_file:
                    json.dump(file, js_file, indent=4, ensure_ascii=False)
                self.btn_ok.setEnabled(True)
                self.btn_delete.setEnabled(True)
                self.error_lab2.setText('–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ')
                self.wnd.subject_box_update()
                self.wnd.clear_pupil_table_widget()
                # self.wnd.show_pupils()


class AboutUsWindow(QWidget, about_us.Ui_Form):
    def __init__(self):
        super(AboutUsWindow, self).__init__()
        self.setupUi(self)
        self.setWindowTitle('–û –Ω–∞—Å')
        self.label.setText('–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:')
        self.about_author.setText('–ù–∏–∫–∏—à–∏–Ω–∞ –ò—Ä–∏–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞')
        self.about_idea_author.setText('–ü–µ—Ä–µ–≤–µ—Ä–∑–µ–≤ –ò–≤–∞–Ω –î–º–∏—Ç—Ä–∏–µ–≤–∏—á')
        self.setWindowIcon(QIcon('static/icon.png'))
        self.pixmap = QPixmap('static/hello.png')
        self.hello_img.setPixmap(self.pixmap)

        scroll = QScrollBar()
        scroll.setStyleSheet('background-color: lightgray')

        self.textBrowser.setVerticalScrollBar(scroll)

        self.show()


def exit():
    sys.exit()


def except_hook(cls, exception, traceback):
    sys.__excepthook__(cls, exception, traceback)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    wnd = MainWindow()
    wnd.show()
    sys.excepthook = except_hook
    sys.exit(app.exec_())
